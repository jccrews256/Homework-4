[
  {
    "objectID": "pages/combining.html",
    "href": "pages/combining.html",
    "title": "Combining Excel and Delimited Data",
    "section": "",
    "text": "For this task, we will manipulate and combine two wine datasets.\nFirst, we need to load our packages.\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.3.3\n\n\nWarning: package 'tidyr' was built under R version 4.3.3\n\n\nWarning: package 'purrr' was built under R version 4.3.3\n\n\nWarning: package 'dplyr' was built under R version 4.3.3\n\n\nWarning: package 'forcats' was built under R version 4.3.3\n\n\nWarning: package 'lubridate' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(readxl)\nlibrary(readr)\nlibrary(DT)\n\n\n1.\nLet’s read in the first sheet of the file, which I have downloaded locally.\n\n#Reading in the data\nwhite_wine_tbl&lt;-read_excel(\"../white-wine.xlsx\", sheet=excel_sheets(\"../white-wine.xlsx\")[1])\n\n#Printing new tibble\nwhite_wine_tbl\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\n\n\n2.\nNext, we will grab the clean variable names in the second sheet of the file and replace our original tibble column names with those.\n\n#Reading in column names\nwhite_wine_colnames&lt;-read_excel(\"../white-wine.xlsx\", \n                                sheet=excel_sheets(\"../white-wine.xlsx\")[2])\n\n#Assigning column names\ncolnames(white_wine_tbl)&lt;-white_wine_colnames$Variables\n\n\n\n3.\nBefore moving to the red wine dataset, we will add a variable indicating that these wines are all white wines.\n\n#Adding new variable indicating these are white wines\nwhite_wine_tbl$type=\"white\"\n\n#Printing updated tibble\ndatatable(white_wine_tbl)\n\n\n\n\n\n\n\n4.\nNext, we will repeat this process for the red wine dataset, with the slight caveat that this file is semi-colon-delimited.\n\n#Reading in red wine data\nred_wine_tbl&lt;-read_delim(\"https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv\",delim=\";\")\n\nRows: 1599 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\ndbl (12): fixed acidity, volatile acidity, citric acid, residual sugar, chlo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n#Printing data to check that it read in correctly\nred_wine_tbl\n\n# A tibble: 1,599 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1             7.4               0.7           0                 1.9     0.076\n 2             7.8               0.88          0                 2.6     0.098\n 3             7.8               0.76          0.04              2.3     0.092\n 4            11.2               0.28          0.56              1.9     0.075\n 5             7.4               0.7           0                 1.9     0.076\n 6             7.4               0.66          0                 1.8     0.075\n 7             7.9               0.6           0.06              1.6     0.069\n 8             7.3               0.65          0                 1.2     0.065\n 9             7.8               0.58          0.02              2       0.073\n10             7.5               0.5           0.36              6.1     0.071\n# ℹ 1,589 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n#Assigning clean column names\ncolnames(red_wine_tbl)&lt;-white_wine_colnames$Variables\n\n#Adding new variable indicating these are red wines\nred_wine_tbl$type=\"red\"\n\n#Printing data to check that variable names and type indicator are correct\ndatatable(red_wine_tbl)\n\n\n\n\n\n\n\n5.\nNext, we will bind the two wine tibbles. To demonstrate the code was successful, note the number of rows in the new tibble.\n\n#Binding wine datasets\nwine_tbl&lt;-bind_rows(red_wine_tbl,white_wine_tbl)\n\n#Printing new tibble\ndatatable(wine_tbl)\n\n\n\n\n\n\n\n6.\nNext, we will subset the data to only those of high quality (quality &gt; 6.5) with a reasonable alcohol value (alcohol &lt; 132).\n\n#Filtering out low-quality wines as well as those with unreasonable alcohol values\nwine_tbl |&gt;\n  filter(quality &gt; 6.5, alcohol &lt; 132) |&gt;\n  datatable()\n\n\n\n\n\n\n\n7.\nWe will continue our data manipulation by sorting the data from highest to lowest quality.\n\n#Filtering out low-quality wines as well as those with unreasonable alcohol values,\n#then sorting from highest to lowest quality\nwine_tbl |&gt;\n  filter(quality &gt; 6.5, alcohol &lt; 132) |&gt;\n  arrange(desc(quality)) |&gt;\n  datatable()\n\n\n\n\n\n\n\n8.\nStill continuing our data manipulation, we will subset to only the variables containing “acid”, the alcohol variable, the type variable, and the quality variable.\n\n#Filtering out low-quality wines as well as those with unreasonable alcohol values,\n#then sorting from highest to lowest quality, then subsetting variables\nwine_tbl |&gt;\n  filter(quality &gt; 6.5, alcohol &lt; 132) |&gt;\n  arrange(desc(quality)) |&gt;\n  select(contains(\"acid\"), alcohol, type, quality) |&gt;\n  datatable()\n\n\n\n\n\n\n\n9.\nFor our final data manipulation step, we will add the mean and standard deviation of alcohol for each unique value of quality.\n\n#Filtering out low-quality wines as well as those with unreasonable alcohol values,\n#then sorting from highest to lowest quality, then subsetting variables,\n#then calculating quality-specific means and standard deviations of alcohol\nwine_tbl |&gt;\n  filter(quality &gt; 6.5, alcohol &lt; 132) |&gt;\n  arrange(desc(quality)) |&gt;\n  select(contains(\"acid\"), alcohol, type, quality) |&gt;\n  group_by(quality) |&gt;\n  mutate(alcohol_mean=mean(alcohol),\n         alcohol_sd=sd(alcohol)) |&gt;\n  datatable()",
    "crumbs": [
      "Home",
      "Combining Excel and Delimited Data"
    ]
  },
  {
    "objectID": "pages/concepts.html",
    "href": "pages/concepts.html",
    "title": "Conceptual Questions",
    "section": "",
    "text": "If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\n\nThe relative path I would specify is \"../MyData.csv\".\n\n\nWhat are the major benefits of using R Projects?\n\n\nR Projects allow us to seamlessly divide our work, as each project has its own working directory, environment, history, folder structure, and source documents. The explicit associationg with a single working directory means we can easily share our work by simply sharing this folder/repo and know the project code should work as long as we have utilized relative file paths. This aspect of R Projects makes them logical tools when utilizing Github repositories for storage and collaboration.\n\n\nWhat is Git and what is GitHub?\n\n\nGit is a version control software that helps track changes to files across time and allows multiple users to collobrate on the same project. Github is a hosting service that allows us to do Git-based projects on the internet and share them with the world virtually.\n\n\nWhat are the two main differences between a tibble and a data.frame?\n\n\nFirst, their printing is more elegant and informative, including the data type of each variable, not printing past the first ten rows, and indicating the total number of columns. Within the Quarto file, a user-friendly interactive table is printed. Second, when subsetting to a single column using the [] operator, the tibble is not coerced down to a vector unlike for data frames.\n\n\nRewrite the following nested function call using BaseR’s chaining operator:\n\n\n\narrange(filter(select(as_tibble(iris), starts_with(\"Petal\"), Species), Petal.Length &lt;\n      1.55), Species)\n\n\n\n\niris |&gt; \n   as_tibble() |&gt; \n   select(starts_with(\"Petal\"),Species) |&gt; \n   filter(Petal.Length &lt; 1.55) |&gt; \n   arrange(Species)",
    "crumbs": [
      "Home",
      "Conceptual Questions"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Homework 4",
    "section": "",
    "text": "Dear grader,\nPrepare to have some fun reviewing Tidyverse code and outputs!\nNote that when I print a dataset, I generally use the datatable() function from the DT package. This is because the datasets are large with many variables.\nCass Crews",
    "crumbs": [
      "Home",
      "Homework 4"
    ]
  },
  {
    "objectID": "pages/read_delimited.html",
    "href": "pages/read_delimited.html",
    "title": "Reading Delimited Data",
    "section": "",
    "text": "For this task, we will be reading in and manipulating delimited data.\nFirst, we need to add in our packages.\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.3.3\n\n\nWarning: package 'tidyr' was built under R version 4.3.3\n\n\nWarning: package 'purrr' was built under R version 4.3.3\n\n\nWarning: package 'dplyr' was built under R version 4.3.3\n\n\nWarning: package 'forcats' was built under R version 4.3.3\n\n\nWarning: package 'lubridate' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(DT)\n\n\nGlass Data\nWe will read in and manipulate some data on glass type and other characteristics.\n\n1.\nFirst, we will read in the file using read_csv as this is a comma-delimited file.\n\n#Reading in the data\nglass_tbl&lt;-read_csv(\"https://www4.stat.ncsu.edu/online/datasets/glass.data\",\n                    col_names=c(\"Id\",\"RI\",\"Na\",\"Mg\",\"Al\",\"Si\",\"K\",\"Ca\",\"Ba\",\"Fe\",\"Type_of_glass\"))\n\nRows: 214 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): Id, RI, Na, Mg, Al, Si, K, Ca, Ba, Fe, Type_of_glass\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n#Printing result\nglass_tbl\n\n# A tibble: 214 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;\n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0                1\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0                1\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0                1\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0                1\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0                1\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26             1\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0                1\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0                1\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0                1\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11             1\n# ℹ 204 more rows\n\n\n\n\n2.\nNext, we will rewrite Type_of_glass as a more informative character variable.\n\n#Replacing numeric type variable with correct type labels, then printing\nglass_tbl |&gt; \n  mutate(Type_of_glass=ifelse(Type_of_glass==1,\"building_windows_float_processed\",\n                        ifelse(Type_of_glass==2,\"building_windows_non_float_processed\",\n                          ifelse(Type_of_glass==3,\"vehicle_windows_float_processed\",\n                            ifelse(Type_of_glass==4,\"vehicle_windows_non_float_processed\",\n                              ifelse(Type_of_glass==5,\"containers\",\n                                ifelse(Type_of_glass==6,\"tableware\",\n                                  ifelse(Type_of_glass==7,\"headlamps\",\"error\")))))))) |&gt;\n  datatable()\n\n\n\n\n\n\n\n3.\nFinally, we will continue the chain by filtering to only observations where Fe is less than 0.2 and the type is either “tableware” or “headlamps”.\n\n#Replacing numeric type variable with correct type labels,\n#filtering to obs where Fe&lt; 0.2 and type is either \"tableware\" or \"headlamps\", then printing\nglass_tbl |&gt; \n  mutate(Type_of_glass=ifelse(Type_of_glass==1,\"building_windows_float_processed\",\n                        ifelse(Type_of_glass==2,\"building_windows_non_float_processed\",\n                          ifelse(Type_of_glass==3,\"vehicle_windows_float_processed\",\n                            ifelse(Type_of_glass==4,\"vehicle_windows_non_float_processed\",\n                              ifelse(Type_of_glass==5,\"containers\",\n                                ifelse(Type_of_glass==6,\"tableware\",\n                                  ifelse(Type_of_glass==7,\"headlamps\",\"error\")))))))) |&gt;\n  filter(Fe&lt; 0.2, Type_of_glass %in% c(\"tableware\",\"headlamps\")) |&gt;\n  datatable()\n\n\n\n\n\n\n\n\nYeast Data\nNext, we will read in and manipulate some data on yeast.\nADT1_YEAST 0.58 0.61 0.47 0.13 0.50 0.00 0.48 0.22 MIT\n\n1.\nFirst, we will read in these fixed-width data.\n\n#Reading in data file\nyeast_tbl&lt;-read_fwf(\"https://www4.stat.ncsu.edu/online/datasets/yeast.data\",\n                    fwf_widths(c(12,6,6,6,6,6,6,6,6,3),\n                               col_names=c(\"seq_name\",\"mcg\",\"gvh\",\"alm\",\"mit\",\"erl\",\"pox\",\"vac\",\"nuc\",\"class\")))\n\nRows: 1484 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\n\nchr (2): seq_name, class\ndbl (8): mcg, gvh, alm, mit, erl, pox, vac, nuc\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n#Printing resultant tibble\nyeast_tbl\n\n# A tibble: 1,484 × 10\n   seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuc class\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows\n\n\n\n\n2.\nNext, we will create a chain that removes the seq_name and nuc variables.\n\n#Removing seq_name and nuc\nyeast_tbl |&gt; \n  select(-seq_name,-nuc) |&gt;\n  datatable()\n\n\n\n\n\n\n\n3.\nFinally, we will continue the chain and create columns containing means and medians for each numeric variable at each class grouping.\n\n#Removing seq_name and nuc, then generating means and medians by class for each\n#numeric variable\nyeast_tbl |&gt; \n  select(-seq_name,-nuc) |&gt;\n  group_by(class) |&gt;\n  mutate(across(where(is.numeric),list(mean=mean,median=median),.names=\"{.fn}_{.col}\")) |&gt;\n  datatable()",
    "crumbs": [
      "Home",
      "Reading Delimited Data"
    ]
  }
]