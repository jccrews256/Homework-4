---
title: "Reading Delimited Data"
format: html
toc: TRUE
editor_options: 
  chunk_output_type: inline
---

For this task, we will be reading in and manipulating delimited data. 

First, we need to add in our packages.

```{r}
library(tidyverse)
```

# Glass Data

We will read in and manipulate some data on glass type and other characteristics. 

### 1. 
First, we will read in the file using `read_csv` as this is a comma-delimited file. 
```{r}
#Reading in the data
glass_tbl<-read_csv("https://www4.stat.ncsu.edu/online/datasets/glass.data",col_names=c("Id","RI","Na","Mg","Al","Si","K","Ca","Ba","Fe","Type_of_glass"))

#Printing result
print(glass_tbl,n=30)
```


### 2. 
Next, we will rewrite `Type_of_glass` as a more informative character variable. 

```{r}
#Replacing numeric type variable with correct type labels, then printing
glass_tbl |> 
  mutate(Type_of_glass=ifelse(Type_of_glass==1,"building_windows_float_processed",
                        ifelse(Type_of_glass==2,"building_windows_non_float_processed",
                          ifelse(Type_of_glass==3,"vehicle_windows_float_processed",
                            ifelse(Type_of_glass==4,"vehicle_windows_non_float_processed",
                              ifelse(Type_of_glass==5,"containers",
                                ifelse(Type_of_glass==6,"tableware",
                                  ifelse(Type_of_glass==7,"headlamps","error")))))))) |>
  print(n=30)
```

### 3. 
Finally, we will continue the chain by filtering to only observations where `Fe` is less than 0.2 and the type is either "tableware" or "headlamps".

```{r}
#Replacing numeric type variable with correct type labels,
#filtering to obs where Fe< 0.2 and type is either "tableware" or "headlamps", then printing
glass_tbl |> 
  mutate(Type_of_glass=ifelse(Type_of_glass==1,"building_windows_float_processed",
                        ifelse(Type_of_glass==2,"building_windows_non_float_processed",
                          ifelse(Type_of_glass==3,"vehicle_windows_float_processed",
                            ifelse(Type_of_glass==4,"vehicle_windows_non_float_processed",
                              ifelse(Type_of_glass==5,"containers",
                                ifelse(Type_of_glass==6,"tableware",
                                  ifelse(Type_of_glass==7,"headlamps","error")))))))) |>
  filter(Fe< 0.2, Type_of_glass %in% c("tableware","headlamps")) |>
  print(n=30)
```


# Yeast Data

Next, we will read in and manipulate some data on yeast. 

ADT1_YEAST  0.58  0.61  0.47  0.13  0.50  0.00  0.48  0.22  MIT

### 1. 
First, we will read in these fixed-width data. 

```{r}
#Reading in data file
yeast_tbl<-read_fwf("https://www4.stat.ncsu.edu/online/datasets/yeast.data",
                    fwf_widths(c(12,6,6,6,6,6,6,6,6,3),
                               col_names=c("seq_name","mcg","gvh","alm","mit","erl","pox","vac","nuc","class")))

#Printing resultant tibble
print(yeast_tbl,n=30)
```

### 2. 

Next, we will create a chain that removes the seq_name and nuc variables. 

```{r}
#Removing seq_name and nuc
yeast_tbl |> 
  select(-seq_name,-nuc) |>
  print(n=30)
```

### 3.

Finally, we will continue the chain and create columns containing means and medians for each numeric variable at each class grouping.

```{r}
#Removing seq_name and nuc, then generating means and medians by class for each
#numeric variable
yeast_tbl |> 
  select(-seq_name,-nuc) |>
  group_by(class) |>
  mutate(across(where(is.numeric),list(mean=mean,median=median),.names="{.fn}_{.col}")) |>
  print(n=30)
```

